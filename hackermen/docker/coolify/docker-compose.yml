version: "3.8"

services:
  coolify:
    image: ghcr.io/coollabsio/coolify:latest
    container_name: coolify
    restart: unless-stopped
    privileged: true
    user: "0:0"
    environment:
      - AUTORUN=false
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_NAME=Coolify
      - APP_URL=https://coolify.brainiac.gg
      - APP_KEY=${APP_KEY}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PUSHER_APP_ID=${PUSHER_APP_ID}
      - PUSHER_APP_KEY=${PUSHER_APP_KEY}
      - PUSHER_APP_SECRET=${PUSHER_APP_SECRET}
      - PUSHER_APP_CLUSTER=mt1
    entrypoint: 
      - /bin/sh
      - -c
      - |
        mkdir -p /var/www/html/storage/app/ssh/keys
        mkdir -p /var/www/html/storage/app/applications
        mkdir -p /var/www/html/storage/app/backups
        mkdir -p /var/www/html/storage/app/services
        mkdir -p /var/www/html/storage/app/webhooks
        mkdir -p /var/www/html/storage/logs
        mkdir -p /var/www/html/storage/framework/cache
        mkdir -p /var/www/html/storage/framework/sessions
        mkdir -p /var/www/html/storage/framework/views
        chown -R www-data:www-data /var/www/html/storage
        chmod -R 755 /var/www/html/storage
        exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
    volumes:
      # Docker socket for container management
      - /var/run/docker.sock:/var/run/docker.sock
      # Coolify data and configuration
      - coolify_data:/data
      - coolify_ssh:/var/www/html/storage/app/ssh
      - coolify_applications:/var/www/html/storage/app/applications
      - coolify_backups:/var/www/html/storage/app/backups
      - coolify_services:/var/www/html/storage/app/services
      - coolify_webhooks:/var/www/html/storage/app/webhooks
    networks:
      - proxy
      - coolify
    depends_on:
      - coolify-db
      - redis
    labels:
      - "traefik.enable=true"
      
      # HTTP Router
      - "traefik.http.routers.coolify-http.rule=Host(`coolify.brainiac.gg`)"
      - "traefik.http.routers.coolify-http.entrypoints=http"
      
      # HTTPS Router
      - "traefik.http.routers.coolify-secure.rule=Host(`coolify.brainiac.gg`)"
      - "traefik.http.routers.coolify-secure.entrypoints=https"
      - "traefik.http.routers.coolify-secure.tls=true"
      - "traefik.http.routers.coolify-secure.tls.certresolver=letsencrypt"
      
      # Service definition
      - "traefik.http.services.coolify-service.loadbalancer.server.port=8000"
      - "traefik.http.routers.coolify-http.service=coolify-service"
      - "traefik.http.routers.coolify-secure.service=coolify-service"

  coolify-db:
    image: postgres:15-alpine
    container_name: coolify-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: coolify
      POSTGRES_USER: coolify
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - coolify

  redis:
    image: redis:7-alpine
    container_name: coolify-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - coolify

  # Coolify Proxy (optional - for apps deployed by Coolify)
  coolify-proxy:
    image: traefik:v3.0
    container_name: coolify-proxy
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=coolify-proxy"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@brainiac.gg"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
    ports:
      - "8080:80"    # HTTP for Coolify apps
      - "8443:443"   # HTTPS for Coolify apps
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - coolify_acme:/acme.json
    networks:
      - coolify-proxy
    labels:
      - "traefik.enable=true"
      
      # Dashboard
      - "traefik.http.routers.coolify-proxy-http.rule=Host(`coolify-proxy.brainiac.gg`)"
      - "traefik.http.routers.coolify-proxy-http.entrypoints=http"
      
      - "traefik.http.routers.coolify-proxy-secure.rule=Host(`coolify-proxy.brainiac.gg`)"
      - "traefik.http.routers.coolify-proxy-secure.entrypoints=https"
      - "traefik.http.routers.coolify-proxy-secure.tls=true"
      - "traefik.http.routers.coolify-proxy-secure.tls.certresolver=letsencrypt"
      
      - "traefik.http.services.coolify-proxy-service.loadbalancer.server.port=8080"
      - "traefik.http.routers.coolify-proxy-http.service=coolify-proxy-service"
      - "traefik.http.routers.coolify-proxy-secure.service=coolify-proxy-service"

volumes:
  coolify_data:
  coolify_ssh:
  coolify_applications:
  coolify_backups:
  coolify_services:
  coolify_webhooks:
  coolify_acme:
  postgres_data:
  redis_data:

networks:
  proxy:
    external: true
  coolify:
    driver: bridge
  coolify-proxy:
    driver: bridge